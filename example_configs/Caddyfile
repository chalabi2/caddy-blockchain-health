# Blockchain Health Dynamic Upstream - Chain-Specific Configuration

{
    admin localhost:2019
}

cosmos.example.com {
    @cosmos_websocket {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    route {
        handle /rpc/* {
            uri strip_prefix /rpc
            handle @cosmos_websocket {
                reverse_proxy {
                    dynamic blockchain_health {
                        rpc_servers {$COSMOS_RPC_SERVERS}
                        service_type "websocket"
                        node_type "cosmos"
                        chain_type "cosmos-hub"
                        check_interval "5s"
                        timeout "3s"
                        block_height_threshold 10
                        min_healthy_nodes 1
                        metrics_enabled true
                    }
                    header_up Connection {http.request.header.Connection}
                    header_up Upgrade {http.request.header.Upgrade}
                    header_up X-Forwarded-For {remote_ip}
                    header_up X-Real-IP {remote_ip}
                }
            }

            reverse_proxy {
                dynamic blockchain_health {
                    rpc_servers {$COSMOS_RPC_SERVERS}
                    service_type "rpc"
                    node_type "cosmos"
                    chain_type "cosmos-hub"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 2
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }

        handle /api/* {
            uri strip_prefix /api
            reverse_proxy {
                dynamic blockchain_health {
                    api_servers {$COSMOS_API_SERVERS}
                    service_type "api"
                    node_type "cosmos"
                    chain_type "cosmos-hub"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 1
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }
    }
}

ethereum.example.com {
    @evm_websocket {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    route {
        handle /rpc/* {
            uri strip_prefix /rpc
            reverse_proxy {
                dynamic blockchain_health {
                    evm_servers {$ETH_SERVERS}
                    node_type "evm"
                    chain_type "ethereum"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 1
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }

        handle /ws/* {
            uri strip_prefix /ws
            handle @evm_websocket {
                reverse_proxy {
                    dynamic blockchain_health {
                        evm_ws_servers {$ETH_WS_SERVERS}
                        node_type "evm"
                        chain_type "ethereum"
                        check_interval "5s"
                        timeout "3s"
                        block_height_threshold 10
                        min_healthy_nodes 1
                        metrics_enabled true
                    }
                    header_up Connection {http.request.header.Connection}
                    header_up Upgrade {http.request.header.Upgrade}
                    header_up X-Forwarded-For {remote_ip}
                    header_up X-Real-IP {remote_ip}
                }
            }
        }
    }
}


althea.example.com {
    @cosmos_websocket {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    @evm_websocket {
        header Connection *Upgrade*
        header Upgrade websocket
    }

    route {
        handle /rpc/cosmos/* {
            uri strip_prefix /rpc/cosmos
            reverse_proxy {
                dynamic blockchain_health {
                    rpc_servers {$ALTHEA_RPC_SERVERS}
                    service_type "rpc"
                    node_type "cosmos"
                    chain_type "althea-cosmos"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 1
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }

        handle /rpc/evm/* {
            uri strip_prefix /rpc/evm
            reverse_proxy {
                dynamic blockchain_health {
                    evm_servers {$ALTHEA_EVM_SERVERS}
                    node_type "evm"
                    chain_type "althea-evm"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 1
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }

        handle /ws/evm/* {
            uri strip_prefix /ws/evm
            handle @evm_websocket {
                reverse_proxy {
                    dynamic blockchain_health {
                        evm_ws_servers {$ALTHEA_EVM_WS_SERVERS}
                        node_type "evm"
                        chain_type "althea-evm"
                        check_interval "5s"
                        timeout "3s"
                        block_height_threshold 10
                        min_healthy_nodes 1
                        metrics_enabled true
                    }
                    header_up Connection {http.request.header.Connection}
                    header_up Upgrade {http.request.header.Upgrade}
                    header_up X-Forwarded-For {remote_ip}
                    header_up X-Real-IP {remote_ip}
                }
            }
        }

        handle /api/* {
            uri strip_prefix /api
            reverse_proxy {
                dynamic blockchain_health {
                    api_servers {$ALTHEA_API_SERVERS}
                    service_type "api"
                    node_type "cosmos"
                    chain_type "althea-cosmos"
                    check_interval "10s"
                    timeout "10s"
                    block_height_threshold 3
                    min_healthy_nodes 1
                    metrics_enabled true
                    external_reference_threshold 0
                }
            }
        }
    }
}

dev-blockchain.localhost {
    reverse_proxy {
        dynamic blockchain_health {
            rpc_servers {$DEV_RPC_SERVERS}
            api_servers {$DEV_API_SERVERS}
            node_type "cosmos"
            chain_type "dev-cosmos"
            check_interval "5s"
            timeout "10s"
            block_height_threshold 20
            log_level "debug"
            min_healthy_nodes 0
            metrics_enabled true
            external_reference_threshold 0
        }
    }
}